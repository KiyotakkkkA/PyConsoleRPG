from src.services.output import Color
from typing import Optional, Union
from rich.text import Text as RichText
import wcwidth

def hash_screen_pixel(char: str, fg_color: str, bg_color: str) -> int:
    return hash((char, fg_color, bg_color))

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∑–∞–º–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∏–∫–æ–Ω–æ–∫ –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ —Å–∏–º–≤–æ–ª—ã
ICON_FALLBACKS = {
    'üåç': 'O',  # –ü–ª–∞–Ω–µ—Ç–∞
    'üè∞': 'C',  # –ó–∞–º–æ–∫
    'üèòÔ∏è': 'H',  # –ì–æ—Ä–æ–¥
    'üì¶': 'B',  # –ö–æ—Ä–æ–±–∫–∞
    'üóùÔ∏è': 'K',  # –ö–ª—é—á
    'üö™': 'D',  # –î–≤–µ—Ä—å
    'üîí': 'L',  # –ó–∞–º–æ–∫
    'üí£': '*',  # –ë–æ–º–±–∞
    'üó°Ô∏è': '/',  # –ú–µ—á
    'üõ°Ô∏è': '0',  # –©–∏—Ç
    'üß™': 'P',  # –ó–µ–ª—å–µ
    'üìú': '=',  # –°–≤–∏—Ç–æ–∫
    'üîÆ': '*',  # –ú–∞–≥–∏—è
    'üèπ': '>',  # –°—Ç—Ä–µ–ª–∞
    '‚öîÔ∏è': 'X',  # –ë–æ–π
    '‚ù§Ô∏è': '<3', # –ó–¥–æ—Ä–æ–≤—å–µ
    'üî•': '^',  # –û–≥–æ–Ω—å
    'üíß': 'V',  # –í–æ–¥–∞
    '‚≠ê': '*',  # –ó–≤–µ–∑–¥–∞
}

class ScreenPixel:
    """
    –ö–ª–∞—Å—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –ø–∏–∫—Å–µ–ª—å –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–ª–æ–∂–Ω—ã—Ö Unicode-—Å–∏–º–≤–æ–ª–æ–≤
    """
    def __init__(self, char: str = " ", fg_color: str = Color.WHITE, bg_color: str = Color.RESET):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
        self._original_char = char
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∏–º–≤–æ–ª —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∏–∫–æ–Ω–∫–æ–π
        self._is_icon = len(char) > 1 or (char and wcwidth.wcwidth(char) > 1)
        
        # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏ Win –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–º–µ–Ω—É –∏–ª–∏ –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª
        if self._is_icon and char in ICON_FALLBACKS:
            self._display_char = ICON_FALLBACKS[char]
        elif self._is_icon:
            self._display_char = "?"
        else:
            self._display_char = char
            
        self.fg_color = fg_color
        self.bg_color = bg_color
        self._rich_text: Optional[RichText] = None
        
    def __str__(self) -> str:
        return f"{self.bg_color}{self.fg_color}{self.char}{Color.RESET}"
    
    def copy(self) -> 'ScreenPixel':
        return ScreenPixel(self._original_char, self.fg_color, self.bg_color)
    
    @property
    def char(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª"""
        return self._original_char
    
    @char.setter
    def char(self, value: str) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Å–∏–º–≤–æ–ª —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        self._original_char = value
        self._is_icon = len(value) > 1 or (value and wcwidth.wcwidth(value) > 1)
        
        if self._is_icon and value in ICON_FALLBACKS:
            self._display_char = ICON_FALLBACKS[value]
        elif self._is_icon:
            self._display_char = "?"
        else:
            self._display_char = value
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π rich_text
        self._rich_text = None
    
    @property
    def rich_text(self) -> RichText:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–∏–∫—Å–µ–ª—è –≤ –≤–∏–¥–µ RichText"""
        if self._rich_text is None:
            self._rich_text = RichText(self._original_char or " ")
        return self._rich_text
    
    @property
    def display_char(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–º–≤–æ–ª –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏ Windows
        """
        if not self._display_char:
            return " "
        return self._display_char
